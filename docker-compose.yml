version: '3.8'

services:
  # Application Next.js - Gestionnaire de fichiers
  file-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: file-manager-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=http://your-vps-ip:3000
      - PORT=3000
    volumes:
      # Volume pour les fichiers uploadés (persistance)
      - ./uploads:/app/uploads
      # Volume pour les logs de l'application
      - ./logs:/app/logs
      # Volume pour la configuration personnalisée (optionnel)
      - ./config:/app/config
    networks:
      - file-manager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données PostgreSQL (pour stocker les métadonnées des fichiers)
  postgres:
    image: postgres:15-alpine
    container_name: file-manager-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=filemanager
      - POSTGRES_USER=filemanager_user
      - POSTGRES_PASSWORD=your_secure_password_here
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      # Volume persistant pour la base de données
      - postgres_data:/var/lib/postgresql/data
      # Script d'initialisation (optionnel)
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - file-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U filemanager_user -d filemanager"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis pour la gestion des sessions et cache
  redis:
    image: redis:7-alpine
    container_name: file-manager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass your_redis_password_here
    volumes:
      # Volume persistant pour Redis
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - file-manager-network
    environment:
      - REDIS_PASSWORD=your_redis_password_here
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx comme reverse proxy et serveur de fichiers statiques
  nginx:
    image: nginx:alpine
    container_name: file-manager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Configuration Nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # Certificats SSL (si utilisés)
      - ./ssl:/etc/nginx/ssl:ro
      # Fichiers statiques et uploads
      - ./uploads:/var/www/uploads:ro
      - ./static:/var/www/static:ro
      # Logs Nginx
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - file-manager
    networks:
      - file-manager-network
    environment:
      - NGINX_HOST=your-domain.com
      - NGINX_PORT=80

  # Service de backup automatique
  backup:
    image: alpine:latest
    container_name: file-manager-backup
    restart: unless-stopped
    volumes:
      - postgres_data:/backup/db:ro
      - ./uploads:/backup/uploads:ro
      - ./backups:/backups
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=filemanager
      - POSTGRES_USER=filemanager_user
      - POSTGRES_PASSWORD=your_secure_password_here
      - BACKUP_SCHEDULE=0 2 * * *  # Tous les jours à 2h du matin
    networks:
      - file-manager-network
    command: |
      sh -c '
        apk add --no-cache postgresql-client dcron
        echo "$$BACKUP_SCHEDULE /scripts/backup.sh" | crontab -
        crond -f
      '
    depends_on:
      - postgres

  # Monitoring avec Watchtower (mise à jour automatique des containers)
  watchtower:
    image: containrrr/watchtower
    container_name: file-manager-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600  # Vérifie les mises à jour toutes les heures
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: --interval 3600

# Réseaux
networks:
  file-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Volumes persistants
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/file-manager/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/file-manager/redis

# Configuration des ressources (optionnel)
x-resources: &default-resources
  deploy:
    resources:
      limits:
        cpus: '1.0'
        memory: 1G
      reservations:
        cpus: '0.5'
        memory: 512M